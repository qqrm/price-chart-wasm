use crate::domain::market_data::{
    repositories::MarketDataRepository, Symbol, TimeInterval, 
    services::{MarketAnalysisService, DataValidationService},
    Candle, entities::CandleSeries
};
use crate::domain::chart::{Chart, services::ChartRenderingService, value_objects::ChartType};
use crate::infrastructure::websocket::BinanceHttpClient;
use wasm_bindgen::prelude::*;
use std::rc::Rc;
use std::cell::RefCell;

/// Helper function for logging
fn log(s: &str) {
    #[allow(unused_unsafe)]
    unsafe {
        web_sys::console::log_1(&s.into());
    }
}

/// Use Case –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ç–æ–∫—É —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
pub struct ConnectToMarketDataUseCase<T> {
    repository: T,
    validation_service: DataValidationService,
}

impl<T> ConnectToMarketDataUseCase<T> {
    pub fn new(repository: T) -> Self {
        Self {
            repository,
            validation_service: DataValidationService::new(),
        }
    }

    pub fn get_repository(&self) -> &T {
        &self.repository
    }

    pub fn get_repository_mut(&mut self) -> &mut T {
        &mut self.repository
    }
}

/// Use Case –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
pub struct AnalyzeMarketDataUseCase {
    analysis_service: MarketAnalysisService,
}

impl AnalyzeMarketDataUseCase {
    pub fn new() -> Self {
        Self {
            analysis_service: MarketAnalysisService::new(),
        }
    }

    pub fn process_candle(&self, candle: Candle, chart: &mut Chart) -> Result<(), JsValue> {
        // Domain validation —á–µ—Ä–µ–∑ analysis service
        if self.analysis_service.validate_candle(&candle) {
            log("‚úÖ Candle validation passed, adding to chart...");
            chart.add_candle(candle);
            
            // Log chart state update
            log(&format!(
                "üìä ChartState updated: Total candles: {}, Latest: {}",
                chart.data.count(),
                if let Some(latest) = chart.data.get_candles().last() {
                    format!("O:{} H:{} L:{} C:{} V:{}",
                        latest.ohlcv.open.value(),
                        latest.ohlcv.high.value(),
                        latest.ohlcv.low.value(),
                        latest.ohlcv.close.value(),
                        latest.ohlcv.volume.value()
                    )
                } else {
                    "No candles".to_string()
                }
            ));
            
            Ok(())
        } else {
            let error_msg = "‚ùå Candle validation failed";
            log(error_msg);
            Err(JsValue::from_str(error_msg))
        }
    }
}

/// Use Case –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
pub struct RenderChartUseCase {
    // –≠—Ç–æ—Ç use case –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
}

impl RenderChartUseCase {
    pub fn new() -> Self {
        Self {}
    }

    pub fn prepare_chart_for_rendering(&self, chart: &Chart) -> Result<(), JsValue> {
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.
        log(&format!("üé® Chart prepared for rendering: {} candles", chart.data.count()));
        Ok(())
    }
}

/// **NEW** Use Case –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
pub struct LoadHistoricalDataUseCase {
    http_client: BinanceHttpClient,
    validation_service: DataValidationService,
}

impl LoadHistoricalDataUseCase {
    pub fn new() -> Self {
        Self {
            http_client: BinanceHttpClient::new(),
            validation_service: DataValidationService::new(),
        }
    }

    pub fn with_testnet() -> Self {
        Self {
            http_client: BinanceHttpClient::with_testnet(),
            validation_service: DataValidationService::new(),
        }
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ CandleSeries
    pub async fn load_historical_candles(
        &self,
        symbol: &Symbol,
        interval: TimeInterval,
        limit: usize,
    ) -> Result<CandleSeries, JsValue> {
        log(&format!(
            "üì° Use Case: Loading historical data for {} with {} interval, limit: {}",
            symbol.value(),
            interval.to_binance_str(),
            limit
        ));

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ HTTP
        let candles = self.http_client
            .get_recent_candles(symbol, interval, limit)
            .await?;

        log(&format!("üìä Use Case: Received {} historical candles", candles.len()));

        // –°–æ–∑–¥–∞–µ–º CandleSeries –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Domain Layer
        let mut candle_series = CandleSeries::new(limit + 100); // –ó–∞–ø–∞—Å –¥–ª—è live –¥–∞–Ω–Ω—ã—Ö
        
        for (i, candle) in candles.into_iter().enumerate() {
            // Domain –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ ValidationService
            match self.validation_service.validate_candle(&candle) {
                Ok(_) => {
                    candle_series.add_candle(candle);
                }
                Err(e) => {
                    log(&format!("‚ö†Ô∏è Use Case: Invalid candle at index {}: {}, skipping", i, e));
                }
            }
        }

        log(&format!(
            "‚úÖ Use Case: Successfully created CandleSeries with {} validated candles",
            candle_series.count()
        ));

        Ok(candle_series)
    }

    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ Chart
    pub async fn load_and_populate_chart(
        &self,
        chart: &mut Chart,
        symbol: &Symbol,
        interval: TimeInterval,
        limit: usize,
    ) -> Result<(), JsValue> {
        log(&format!(
            "üîÑ Use Case: Loading historical data into chart for {}",
            symbol.value()
        ));

        let candle_series = self.load_historical_candles(symbol, interval, limit).await?;
        
        // –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ chart –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ
        chart.data = candle_series;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º viewport –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        chart.update_viewport_for_data();
        
        log(&format!(
            "üìà Use Case: Chart populated with {} historical candles",
            chart.data.count()
        ));

        Ok(())
    }
}

/// –ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö Use Cases
pub struct ChartApplicationCoordinator<T> {
    connect_use_case: ConnectToMarketDataUseCase<T>,
    analyze_use_case: AnalyzeMarketDataUseCase,
    render_use_case: RenderChartUseCase,
    historical_use_case: LoadHistoricalDataUseCase,
    chart: Chart,
}

impl<T> ChartApplicationCoordinator<T> {
    pub fn new(repository: T) -> Self {
        Self {
            connect_use_case: ConnectToMarketDataUseCase::new(repository),
            analyze_use_case: AnalyzeMarketDataUseCase::new(),
            render_use_case: RenderChartUseCase::new(),
            historical_use_case: LoadHistoricalDataUseCase::new(),
            chart: Chart::new("main-chart".to_string(), ChartType::Candlestick, 1000),
        }
    }

    pub fn get_chart(&self) -> &Chart {
        &self.chart
    }

    pub fn get_chart_mut(&mut self) -> &mut Chart {
        &mut self.chart
    }

    pub fn get_connect_use_case_mut(&mut self) -> &mut ConnectToMarketDataUseCase<T> {
        &mut self.connect_use_case
    }

    /// **NEW** –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ live –ø–æ—Ç–æ–∫—É
    pub async fn initialize_with_historical_data(
        &mut self,
        symbol: &Symbol,
        interval: TimeInterval,
        historical_limit: usize,
    ) -> Result<(), JsValue> {
        log("üöÄ Application: Initializing chart with historical data...");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.historical_use_case
            .load_and_populate_chart(&mut self.chart, symbol, interval, historical_limit)
            .await?;

        log(&format!(
            "‚úÖ Application: Chart initialized with {} historical candles",
            self.chart.data.count()
        ));

        Ok(())
    }

    pub fn process_new_candle(&mut self, candle: Candle) -> Result<(), JsValue> {
        log(&format!(
            "üì® Use Case: Received candle data - {} O:{} H:{} L:{} C:{} V:{}",
            candle.timestamp.value(),
            candle.ohlcv.open.value(),
            candle.ohlcv.high.value(),
            candle.ohlcv.low.value(),
            candle.ohlcv.close.value(),
            candle.ohlcv.volume.value()
        ));

        self.analyze_use_case.process_candle(candle, &mut self.chart)
    }

    pub fn prepare_for_rendering(&self) -> Result<(), JsValue> {
        self.render_use_case.prepare_chart_for_rendering(&self.chart)
    }
} 