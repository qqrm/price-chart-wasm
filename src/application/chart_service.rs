use crate::{
    domain::{
        chart::Chart,
        market_data::{Symbol, TimeInterval},
        logging::{LogComponent, get_logger},
    },
    infrastructure::{
        websocket::BinanceWebSocketClient,
        http::BinanceHttpClient,
    },
    application::use_cases::UnifiedDataStreamUseCase,
};
use std::sync::{Arc, Mutex};

/// –°–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
pub struct ChartApplicationService {
    chart: Arc<Mutex<Chart>>,
    data_stream: Option<UnifiedDataStreamUseCase<BinanceWebSocketClient>>,
}

impl ChartApplicationService {
    pub fn new(chart_id: String) -> Self {
        let chart = Chart::new(
            chart_id,
            crate::domain::chart::value_objects::ChartType::Candlestick,
            1000, // –ú–∞–∫—Å–∏–º—É–º 1000 —Å–≤–µ—á–µ–π
        );

        Self {
            chart: Arc::new(Mutex::new(chart)),
            data_stream: None,
        }
    }

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–µ–∞–ª-—Ç–∞–π–º —Å—Ç—Ä–∏–º–æ–º
    pub async fn initialize_with_unified_stream(
        &mut self,
        symbol: Symbol,
        interval: TimeInterval,
        historical_limit: usize,
    ) -> Result<(), Box<dyn std::error::Error>> {
        get_logger().info(
            LogComponent::Application("ChartService"),
            &format!("üöÄ Initializing chart with unified data stream for {}", symbol.value())
        );

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        let http_client = BinanceHttpClient::new();
        let ws_client = BinanceWebSocketClient::new(symbol.clone(), interval);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π Use Case
        let mut unified_stream = UnifiedDataStreamUseCase::new(
            http_client,
            ws_client,
            Arc::clone(&self.chart),
        );

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        unified_stream
            .initialize_and_stream(&symbol, interval, historical_limit)
            .await?;

        self.data_stream = Some(unified_stream);

        get_logger().info(
            LogComponent::Application("ChartService"),
            "‚úÖ Chart service initialized with unified data stream"
        );

        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–∏–∫—É –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    pub fn get_chart(&self) -> Arc<Mutex<Chart>> {
        Arc::clone(&self.chart)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
    pub fn get_data_stats(&self) -> DataStats {
        if let Some(stream) = &self.data_stream {
            DataStats {
                total_candles: stream.get_candle_count(),
                has_data: stream.has_data(),
                is_streaming: true,
            }
        } else {
            DataStats {
                total_candles: 0,
                has_data: false,
                is_streaming: false,
            }
        }
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã—Ö
    pub async fn stop_data_stream(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        if let Some(mut stream) = self.data_stream.take() {
            stream.stop_stream().await?;
            get_logger().info(
                LogComponent::Application("ChartService"),
                "üõë Data stream stopped"
            );
        }
        Ok(())
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
#[derive(Debug, Clone)]
pub struct DataStats {
    pub total_candles: usize,
    pub has_data: bool,
    pub is_streaming: bool,
} 