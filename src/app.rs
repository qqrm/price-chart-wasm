use leptos::*;
use leptos::html::Canvas;
use std::rc::Rc;
use std::cell::RefCell;
use crate::{
    domain::market_data::entities::Candle,
    infrastructure::{
        rendering::WebGpuRenderer,
        websocket::BinanceWebSocketClient,
    },
    domain::{
        chart::Chart,
        market_data::{value_objects::Symbol, TimeInterval},
    },
};

/// ü¶Ä –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Bitcoin Chart –Ω–∞ Leptos
#[component]
pub fn App() -> impl IntoView {
    view! {
        <div class="bitcoin-chart-app">
            <Header />
            <ChartContainer />
            <DebugConsole />
        </div>
    }
}

/// üìä –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–µ
#[component]
fn Header() -> impl IntoView {
    // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    let (current_price, set_current_price) = create_signal(0.0);
    let (candle_count, set_candle_count) = create_signal(0);
    let (is_streaming, set_is_streaming) = create_signal(false);

    view! {
        <div class="header">
            <h1>"üåê Bitcoin WebSocket Chart"</h1>
            <p>"BTC/USDT ‚Ä¢ Real-time Leptos + WebGPU"</p>
            
            <div class="price-info">
                <div class="price-item">
                    <div class="price-value">
                        {move || format!("${:.2}", current_price.get())}
                    </div>
                    <div class="price-label">"Current Price"</div>
                </div>
                <div class="price-item">
                    <div class="price-value">
                        {move || candle_count.get().to_string()}
                    </div>
                    <div class="price-label">"Candles"</div>
                </div>
                <div class="price-item">
                    <div class="price-value">
                        {move || if is_streaming.get() { "üü¢ LIVE" } else { "üî¥ OFF" }}
                    </div>
                    <div class="price-label">"WebSocket"</div>
                </div>
            </div>
        </div>
    }
}

/// üé® –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è WebGPU –≥—Ä–∞—Ñ–∏–∫–∞
#[component]
fn ChartContainer() -> impl IntoView {
    // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    let (candles, set_candles) = create_signal::<Vec<Candle>>(Vec::new());
    let (renderer, set_renderer) = create_signal::<Option<Rc<RefCell<WebGpuRenderer>>>>(None);
    let (status, set_status) = create_signal("Initializing...".to_string());

    // –°—Å—ã–ª–∫–∞ –Ω–∞ canvas —ç–ª–µ–º–µ–Ω—Ç
    let canvas_ref = create_node_ref::<Canvas>();

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebGPU –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    create_effect(move |_| {
        if canvas_ref.get().is_some() {
            spawn_local(async move {
                set_status.set("üöÄ Initializing WebGPU renderer...".to_string());
                
                match WebGpuRenderer::new("chart-canvas", 800, 500).await {
                    Ok(webgpu_renderer) => {
                        let renderer_rc = Rc::new(RefCell::new(webgpu_renderer));
                        set_renderer.set(Some(renderer_rc));
                        set_status.set("‚úÖ WebGPU renderer ready".to_string());
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ renderer
                        start_websocket_stream(set_candles, set_status).await;
                    }
                    Err(e) => {
                        set_status.set(format!("‚ùå WebGPU failed: {:?}", e));
                    }
                }
            });
        }
    });

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    create_effect(move |_| {
        candles.with(|candles_data| {
            renderer.with(|renderer_opt| {
                if let Some(renderer_rc) = renderer_opt {
                    if !candles_data.is_empty() {
                        // –°–æ–∑–¥–∞–µ–º Chart –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
                        let mut chart = Chart::new(
                            "leptos-chart".to_string(),
                            crate::domain::chart::ChartType::Candlestick,
                            1000
                        );
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ chart
                        for candle in candles_data {
                            chart.data.add_candle(candle.clone());
                        }

                        // –†–µ–Ω–¥–µ—Ä–∏–º
                        if let Ok(webgpu_renderer) = renderer_rc.try_borrow() {
                            if let Err(e) = webgpu_renderer.render(&chart) {
                                set_status.set(format!("‚ùå Render error: {:?}", e));
                            } else {
                                set_status.set(format!("‚úÖ Rendered {} candles", candles_data.len()));
                            }
                        }
                    }
                }
            });
        });
    });

    view! {
        <div class="chart-container">
            <canvas 
                id="chart-canvas"
                node_ref=canvas_ref
                width="800"
                height="500"
                style="border: 2px solid #4a5d73; border-radius: 10px; background: #2c3e50;"
            />
            <div class="status">
                {move || status.get()}
            </div>
        </div>
    }
}

/// üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å
#[component] 
fn DebugConsole() -> impl IntoView {
    let (logs, set_logs) = create_signal::<Vec<String>>(Vec::new());
    let (is_paused, set_is_paused) = create_signal(false);

    view! {
        <div class="debug-console">
            <div class="debug-header">
                <span>"üêõ Leptos Debug Console"</span>
                <button 
                    on:click=move |_| set_is_paused.update(|p| *p = !*p)
                    class="debug-btn"
                >
                    {move || if is_paused.get() { "‚ñ∂Ô∏è Resume" } else { "‚è∏Ô∏è Pause" }}
                </button>
                <button 
                    on:click=move |_| set_logs.set(Vec::new())
                    class="debug-btn"
                >
                    "üóëÔ∏è Clear"
                </button>
            </div>
            <div class="debug-log">
                <For
                    each=move || logs.get()
                    key=|log| log.clone()
                    children=move |log| {
                        view! { <div class="log-line">{log}</div> }
                    }
                />
            </div>
        </div>
    }
}

/// üåê –ó–∞–ø—É—Å–∫ WebSocket —Å—Ç—Ä–∏–º–∞ –≤ Leptos
async fn start_websocket_stream(
    set_candles: WriteSignal<Vec<Candle>>,
    set_status: WriteSignal<String>,
) {
    set_status.set("üîå Starting WebSocket stream...".to_string());

    let symbol = Symbol::from("BTCUSDT");
    let interval = TimeInterval::OneMinute;
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    match crate::infrastructure::http::BinanceHttpClient::new()
        .get_recent_candles(&symbol, interval, 200).await 
    {
        Ok(historical_candles) => {
            set_candles.set(historical_candles.clone());
            set_status.set(format!("‚úÖ Loaded {} historical candles", historical_candles.len()));
            
            // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º WebSocket
            let mut ws_client = BinanceWebSocketClient::new(symbol, interval);
            
            spawn_local(async move {
                let handler = move |candle: Candle| {
                    // –†–µ–∞–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Leptos!
                    set_candles.update(|candles| {
                        let new_timestamp = candle.timestamp.value();
                        
                        if let Some(last_candle) = candles.last_mut() {
                            if last_candle.timestamp.value() == new_timestamp {
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–µ—á—É
                                *last_candle = candle;
                            } else if new_timestamp > last_candle.timestamp.value() {
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
                                candles.push(candle);
                                
                                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 300 —Å–≤–µ—á–µ–π
                                while candles.len() > 300 {
                                    candles.remove(0);
                                }
                            }
                        } else {
                            candles.push(candle);
                        }
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    set_status.set("üåê WebSocket LIVE ‚Ä¢ Real-time updates".to_string());
                };

                if let Err(e) = ws_client.start_stream(handler).await {
                    set_status.set(format!("‚ùå WebSocket error: {}", e));
                }
            });
        }
        Err(e) => {
            set_status.set(format!("‚ùå Failed to load historical data: {:?}", e));
        }
    }
} 