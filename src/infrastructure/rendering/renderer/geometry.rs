use super::*;
use crate::log_info;

impl WebGpuRenderer {
    pub(super) fn create_geometry(&self, chart: &Chart) -> (Vec<CandleVertex>, ChartUniforms) {
        let candles = chart.data.get_candles();
        if candles.is_empty() {
            log_info!(LogComponent::Infrastructure("WebGpuRenderer"), "‚ö†Ô∏è No candles to render");
            return (vec![], ChartUniforms::new());
        }

        // ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–µ
        if candles.len() % 100 == 0 {
            log_info!(
                LogComponent::Infrastructure("WebGpuRenderer"),
                "üîß Creating optimized geometry for {} candles",
                candles.len()
            );
        }

        let candle_count = candles.len();
        let chart_width = 2.0; // NDC width (-1 to 1)
        let _chart_height = 2.0; // NDC height (-1 to 1)

        // üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—å—à–µ —Å–≤–µ—á–µ–π –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∑—É–º–∞
        let base_candles = 300.0;
        let visible_count = (base_candles / self.zoom_level)
            .max(10.0)
            .min(candle_count as f64) as usize;
        let start_index = if candle_count > visible_count {
            candle_count - visible_count
        } else {
            0
        };
        let visible_candles: Vec<Candle> = candles
            .iter()
            .skip(start_index)
            .cloned()
            .collect();

        let mut vertices = Vec::with_capacity(visible_candles.len() * 24);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ viewport –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∫–∏
        let mut min_price = chart.viewport.min_price;
        let mut max_price = chart.viewport.max_price;
        if (max_price - min_price).abs() < f32::EPSILON {
            // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ –¥–∞–Ω–Ω—ã–º
            for candle in &visible_candles {
                min_price = min_price.min(candle.ohlcv.low.value() as f32);
                max_price = max_price.max(candle.ohlcv.high.value() as f32);
            }

            let price_range = max_price - min_price;
            min_price -= price_range * 0.05;
            max_price += price_range * 0.05;
        }

        // Calculate visible candle width and spacing
        let spacing_ratio = 0.2; // 20% spacing between candles
        let step_size = chart_width / candle_count as f64;
        let max_candle_width = step_size * (1.0 - spacing_ratio);
        let _candle_width = max_candle_width.max(0.01).min(0.06); // Reasonable width limits

        log_info!(
            LogComponent::Infrastructure("WebGpuRenderer"),
            "üìè Price range: {:.2} - {:.2}, Candle width: {:.4}, step:{:.4}",
            min_price,
            max_price,
            _candle_width,
            step_size
        );

        // Ensure we have a valid price range
        if (max_price - min_price).abs() < 0.01 {
            get_logger().error(
                LogComponent::Infrastructure("WebGpuRenderer"),
                "‚ùå Invalid price range!",
            );
            return (vec![], ChartUniforms::new());
        }



        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if visible_candles.len() % 50 == 0 {
            log_info!(
                LogComponent::Infrastructure("WebGpuRenderer"),
                "üîß Rendering {} candles (showing last {} of {}) [zoom: {:.2}x]",
                visible_candles.len(),
                visible_count,
                candles.len(),
                self.zoom_level
            );
        }

        // Create vertices for each visible candle
        let chart_width = 2.0; // NDC width (-1 to 1)

        // üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º –∫ —Ä–∞–∑–º–µ—Ä—É —Å–≤–µ—á–µ–π
        let base_step_size = chart_width / visible_candles.len() as f32;
        let zoom_factor = self.zoom_level.max(0.1).min(10.0) as f32; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑—É–º
        let step_size = base_step_size * zoom_factor; // –ü—Ä–∏ –∑—É–º–µ > 1.0 —Å–≤–µ—á–∏ —à–∏—Ä–µ
        let candle_width = (step_size * 0.8).max(0.002).min(0.1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É

        for (i, candle) in visible_candles.iter().enumerate() {
            // Position X in NDC space [-1, 1] - –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ —Å–ø—Ä–∞–≤–∞
            let x = -1.0 + (i as f32 + 0.5) * step_size;

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Y - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ [-0.5, 0.8] –¥–ª—è —Å–≤–µ—á–µ–π
            let price_range = max_price - min_price;
            let price_norm = |price: f64| -> f32 {
                let normalized = (price as f32 - min_price) / price_range;
                -0.5 + normalized * 1.3 // Map to [-0.5, 0.8] - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è volume
            };

            let open_y = price_norm(candle.ohlcv.open.value());
            let high_y = price_norm(candle.ohlcv.high.value());
            let low_y = price_norm(candle.ohlcv.low.value());
            let close_y = price_norm(candle.ohlcv.close.value());

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
            if i < 3 || i >= visible_count - 3 {
                log_info!(
                    LogComponent::Infrastructure("WebGpuRenderer"),
                    "üïØÔ∏è Candle {}: x={:.3}, Y=({:.3},{:.3},{:.3},{:.3}) width={:.4}",
                    i,
                    x,
                    open_y,
                    high_y,
                    low_y,
                    close_y,
                    candle_width
                );
            }

            let half_width = candle_width * 0.5;
            let body_top = open_y.max(close_y);
            let body_bottom = open_y.min(close_y);

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            let min_height = 0.005;
            let actual_body_top = if (body_top - body_bottom).abs() < min_height {
                body_bottom + min_height
            } else {
                body_top
            };

            let is_bullish = close_y >= open_y;

            // –¢–µ–ª–æ —Å–≤–µ—á–∏
            let body_vertices = vec![
                CandleVertex::body_vertex(x - half_width, body_bottom, is_bullish),
                CandleVertex::body_vertex(x + half_width, body_bottom, is_bullish),
                CandleVertex::body_vertex(x - half_width, actual_body_top, is_bullish),
                CandleVertex::body_vertex(x + half_width, body_bottom, is_bullish),
                CandleVertex::body_vertex(x + half_width, actual_body_top, is_bullish),
                CandleVertex::body_vertex(x - half_width, actual_body_top, is_bullish),
            ];
            vertices.extend_from_slice(&body_vertices);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏—Ç–∏–ª–∏ (–≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π)
            let wick_width = candle_width * 0.1; // –¢–æ–Ω–∫–∏–µ —Ñ–∏—Ç–∏–ª–∏
            let wick_half = wick_width * 0.5;

            // –í–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
            if high_y > actual_body_top {
                let upper_wick = vec![
                    CandleVertex::wick_vertex(x - wick_half, actual_body_top),
                    CandleVertex::wick_vertex(x + wick_half, actual_body_top),
                    CandleVertex::wick_vertex(x - wick_half, high_y),
                    CandleVertex::wick_vertex(x + wick_half, actual_body_top),
                    CandleVertex::wick_vertex(x + wick_half, high_y),
                    CandleVertex::wick_vertex(x - wick_half, high_y),
                ];
                vertices.extend_from_slice(&upper_wick);
            }

            // –ù–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
            if low_y < body_bottom {
                let lower_wick = vec![
                    CandleVertex::wick_vertex(x - wick_half, low_y),
                    CandleVertex::wick_vertex(x + wick_half, low_y),
                    CandleVertex::wick_vertex(x - wick_half, body_bottom),
                    CandleVertex::wick_vertex(x + wick_half, low_y),
                    CandleVertex::wick_vertex(x + wick_half, body_bottom),
                    CandleVertex::wick_vertex(x - wick_half, body_bottom),
                ];
                vertices.extend_from_slice(&lower_wick);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–æ—à–Ω—É—é –ª–∏–Ω–∏—é —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        if let Some(last_candle) = visible_candles.last() {
            let current_price = last_candle.ohlcv.close.value() as f32;
            let price_range = max_price - min_price;
            let price_y = -0.5 + ((current_price - min_price) / price_range) * 1.3; // –¢–∞ –∂–µ –æ–±–ª–∞—Å—Ç—å —á—Ç–æ –∏ —Å–≤–µ—á–∏

            // –°–ø–ª–æ—à–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            let line_thickness = 0.002;
            let price_line = vec![
                CandleVertex::current_price_vertex(-1.0, price_y - line_thickness),
                CandleVertex::current_price_vertex(1.0, price_y - line_thickness),
                CandleVertex::current_price_vertex(-1.0, price_y + line_thickness),
                CandleVertex::current_price_vertex(1.0, price_y - line_thickness),
                CandleVertex::current_price_vertex(1.0, price_y + line_thickness),
                CandleVertex::current_price_vertex(-1.0, price_y + line_thickness),
            ];
            vertices.extend_from_slice(&price_line);
        }

        // üìä –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
        vertices.extend(self.create_grid_lines(min_price, max_price, visible_candles.len()));

        // üìä –î–æ–±–∞–≤–ª—è–µ–º volume bars –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
        vertices.extend(self.create_volume_bars(&visible_candles));

        // üìà –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (SMA20 –∏ EMA12)
        vertices.extend(self.create_moving_averages(&visible_candles, min_price, max_price));

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –≤–µ—Ä—à–∏–Ω
        if vertices.len() > 1000 {
            log_info!(
                LogComponent::Infrastructure("WebGpuRenderer"),
                "‚úÖ Generated {} vertices for {} visible candles + indicators",
                vertices.len(),
                visible_candles.len()
            );
        }

        // Identity matrix - vertices are already in NDC coordinates [-1, 1]
        let view_proj_matrix = [
            [1.0, 0.0, 0.0, 0.0],
            [0.0, 1.0, 0.0, 0.0],
            [0.0, 0.0, 1.0, 0.0],
            [0.0, 0.0, 0.0, 1.0],
        ];

        // Create uniforms with corrected parameters
        let uniforms = ChartUniforms {
            view_proj_matrix,
            viewport: [self.width as f32, self.height as f32, min_price, max_price],
            time_range: [
                0.0,
                visible_candles.len() as f32,
                visible_candles.len() as f32,
                0.0,
            ],
            bullish_color: [0.447, 0.776, 0.522, 1.0], // #72c685 - –∑–µ–ª–µ–Ω—ã–π
            bearish_color: [0.882, 0.420, 0.282, 1.0], // #e16b48 - –∫—Ä–∞—Å–Ω—ã–π
            wick_color: [0.6, 0.6, 0.6, 0.9],          // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            sma20_color: [1.0, 0.2, 0.2, 0.9],         // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
            sma50_color: [1.0, 0.8, 0.0, 0.9],         // –ñ–µ–ª—Ç—ã–π
            sma200_color: [0.2, 0.4, 0.8, 0.9],        // –°–∏–Ω–∏–π
            ema12_color: [0.8, 0.2, 0.8, 0.9],         // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            ema26_color: [0.0, 0.8, 0.8, 0.9],         // –ì–æ–ª—É–±–æ–π
            current_price_color: [1.0, 1.0, 0.0, 0.8], // üí∞ –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π
            render_params: [candle_width as f32, spacing_ratio as f32, 0.004, 0.0],
        };

        (vertices, uniforms)
    }

    /// üìà –°–æ–∑–¥–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    fn create_moving_averages(
        &self,
        candles: &[crate::domain::market_data::Candle],
        min_price: f32,
        max_price: f32,
    ) -> Vec<CandleVertex> {
        use crate::infrastructure::rendering::gpu_structures::{CandleGeometry, IndicatorType};

        if candles.len() < 20 {
            return Vec::new(); // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA20
        }

        let mut vertices = Vec::with_capacity(candles.len() * 6);
        let candle_count = candles.len();
        let step_size = 2.0 / candle_count as f32;
        let price_range = max_price - min_price;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã –≤ NDC –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let price_to_ndc = |price: f32| -> f32 { -0.8 + ((price - min_price) / price_range) * 1.6 };

        // –†–∞—Å—á—ë—Ç SMA20 (Simple Moving Average 20)
        let mut sma20_points = Vec::with_capacity(candles.len().saturating_sub(19));
        for i in 19..candle_count {
            // –ù–∞—á–∏–Ω–∞–µ–º —Å 20-–π —Å–≤–µ—á–∏
            let sum: f32 = candles[i - 19..=i]
                .iter()
                .map(|c| c.ohlcv.close.value() as f32)
                .sum();
            let sma20 = sum / 20.0;
            let x = -1.0 + (i as f32 + 0.5) * step_size;
            let y = price_to_ndc(sma20);
            sma20_points.push((x, y));
        }

        // –†–∞—Å—á—ë—Ç EMA12 (Exponential Moving Average 12)
        let mut ema12_points = Vec::with_capacity(candles.len().saturating_sub(11));
        if candle_count >= 12 {
            let multiplier = 2.0 / (12.0 + 1.0); // EMA multiplier
            let mut ema = candles[0].ohlcv.close.value() as f32; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            for i in 1..candle_count {
                let close = candles[i].ohlcv.close.value() as f32;
                ema = (close * multiplier) + (ema * (1.0 - multiplier));

                if i >= 11 {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º EMA —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 12 —Å–≤–µ—á–µ–π
                    let x = -1.0 + (i as f32 + 0.5) * step_size;
                    let y = price_to_ndc(ema);
                    ema12_points.push((x, y));
                }
            }
        }

        // –°–æ–∑–¥–∞—ë–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è –ª–∏–Ω–∏–π
        if !sma20_points.is_empty() {
            let sma20_vertices = CandleGeometry::create_indicator_line_vertices(
                &sma20_points,
                IndicatorType::SMA20,
                0.003, // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
            );
            vertices.extend(sma20_vertices);
        }

        if !ema12_points.is_empty() {
            let ema12_vertices = CandleGeometry::create_indicator_line_vertices(
                &ema12_points,
                IndicatorType::EMA12,
                0.003, // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
            );
            vertices.extend(ema12_vertices);
        }

        if !vertices.is_empty() {
            log_info!(
                LogComponent::Infrastructure("WebGpuRenderer"),
                "üìà Generated {} SMA20 points, {} EMA12 points, {} total MA vertices",
                sma20_points.len(),
                ema12_points.len(),
                vertices.len()
            );
        }

        vertices
    }

    /// üìä –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏)
    fn create_grid_lines(
        &self,
        min_price: f32,
        max_price: f32,
        candle_count: usize,
    ) -> Vec<CandleVertex> {
        let num_price_lines = 8; // 8 –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
        let num_vertical_lines = 10; // 10 –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
        let mut vertices = Vec::with_capacity((num_price_lines + num_vertical_lines) * 6);
        let line_thickness = 0.001; // –¢–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ (—Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏)
        let price_range = max_price - min_price;

        for i in 1..num_price_lines {
            let price_level = min_price + (price_range * i as f32 / num_price_lines as f32);
            let y = -0.5 + ((price_level - min_price) / price_range) * 1.3; // –¢–∞ –∂–µ –æ–±–ª–∞—Å—Ç—å —á—Ç–æ –∏ —Å–≤–µ—á–∏

            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ—Å—å –≥—Ä–∞—Ñ–∏–∫
            let horizontal_line = vec![
                CandleVertex::grid_vertex(-1.0, y - line_thickness),
                CandleVertex::grid_vertex(1.0, y - line_thickness),
                CandleVertex::grid_vertex(-1.0, y + line_thickness),
                CandleVertex::grid_vertex(1.0, y - line_thickness),
                CandleVertex::grid_vertex(1.0, y + line_thickness),
                CandleVertex::grid_vertex(-1.0, y + line_thickness),
            ];
            vertices.extend_from_slice(&horizontal_line);
        }

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) - –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤–µ—Å—å –≥—Ä–∞—Ñ–∏–∫
        if candle_count > 0 {
            let step_size = 2.0 / candle_count as f32;
            let num_vertical_lines = 10; // 10 –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
            let vertical_step = candle_count / num_vertical_lines;

            for i in 1..num_vertical_lines {
                let candle_index = i * vertical_step;
                if candle_index < candle_count {
                    let x = -1.0 + (candle_index as f32 + 0.5) * step_size;

                    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ—Å—å –≥—Ä–∞—Ñ–∏–∫ (–≤–∫–ª—é—á–∞—è volume –æ–±–ª–∞—Å—Ç—å)
                    let vertical_line = vec![
                        CandleVertex::grid_vertex(x - line_thickness, -1.0), //–û—Ç —Å–∞–º–æ–≥–æ –Ω–∏–∑–∞
                        CandleVertex::grid_vertex(x + line_thickness, -1.0),
                        CandleVertex::grid_vertex(x - line_thickness, 0.8), //–î–æ –≤–µ—Ä—Ö–∞ —Å–≤–µ—á–µ–π
                        CandleVertex::grid_vertex(x + line_thickness, -1.0),
                        CandleVertex::grid_vertex(x + line_thickness, 0.8),
                        CandleVertex::grid_vertex(x - line_thickness, 0.8),
                    ];
                    vertices.extend_from_slice(&vertical_line);
                }
            }
        }

        log_info!(
            LogComponent::Infrastructure("WebGpuRenderer"),
            "üìä Generated {} grid vertices",
            vertices.len()
        );

        vertices
    }

    /// üìä –°–æ–∑–¥–∞—Ç—å volume bars –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º
    fn create_volume_bars(
        &self,
        candles: &[crate::domain::market_data::Candle],
    ) -> Vec<CandleVertex> {
        if candles.is_empty() {
            return Vec::new();
        }

        let candle_count = candles.len();
        let mut vertices = Vec::with_capacity(candle_count * 6);

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        let max_volume = candles
            .iter()
            .map(|c| c.ohlcv.volume.value() as f32)
            .fold(0.0f32, |a, b| a.max(b));

        if max_volume <= 0.0 {
            return Vec::new();
        }

        // Volume –æ–±–ª–∞—Å—Ç—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ [-1.0, -0.6]
        let volume_top = -0.6;
        let volume_bottom = -1.0;
        let volume_height = volume_top - volume_bottom;

        let step_size = 2.0 / candle_count as f32;
        let bar_width = (step_size * 0.8).max(0.002); // 80% –æ—Ç step_size

        for (i, candle) in candles.iter().enumerate() {
            let x = -1.0 + (i as f32 + 0.5) * step_size;
            let volume_normalized = (candle.ohlcv.volume.value() as f32) / max_volume;
            let bar_height = volume_height * volume_normalized;
            let bar_top = volume_bottom + bar_height;

            let half_width = bar_width * 0.5;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç volume bar: –∑–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞, –∫—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ —É–ø–∞–ª–∞
            let is_bullish = candle.ohlcv.close.value() >= candle.ohlcv.open.value();

            // Volume bar –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
            let volume_bar = vec![
                CandleVertex::volume_vertex(x - half_width, volume_bottom, is_bullish),
                CandleVertex::volume_vertex(x + half_width, volume_bottom, is_bullish),
                CandleVertex::volume_vertex(x - half_width, bar_top, is_bullish),
                CandleVertex::volume_vertex(x + half_width, volume_bottom, is_bullish),
                CandleVertex::volume_vertex(x + half_width, bar_top, is_bullish),
                CandleVertex::volume_vertex(x - half_width, bar_top, is_bullish),
            ];
            vertices.extend_from_slice(&volume_bar);
        }

        log_info!(
            LogComponent::Infrastructure("WebGpuRenderer"),
            "üìä Generated {} volume vertices for {} candles (max volume: {:.2})",
            vertices.len(),
            candles.len(),
            max_volume
        );

        vertices
    }

    fn create_candles(&self, candles: &[Candle]) -> Vec<CandleVertex> {
        let mut vertices = Vec::with_capacity(candles.len() * 12);
        if candles.is_empty() {
            return vertices;
        }

        // üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –∑—É–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—å—à–µ —Å–≤–µ—á–µ–π –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∑—É–º–∞
        let visible_count = (300.0 / self.zoom_level).max(10.0) as usize;
        let start_idx = if candles.len() > visible_count {
            candles.len() - visible_count
        } else {
            0
        };
        let visible_candles = &candles[start_idx..];

        if visible_candles.is_empty() {
            return vertices;
        }

        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        let (min_price, max_price) =
            visible_candles
                .iter()
                .fold((f64::MAX, f64::MIN), |(min, max), candle| {
                    let low = candle.ohlcv.low.value();
                    let high = candle.ohlcv.high.value();
                    (min.min(low), max.max(high))
                });

        let price_range = max_price - min_price;
        if price_range == 0.0 {
            return vertices;
        }

        // üîç –£—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ step_size
        let base_step_size = 2.0 / visible_candles.len() as f64;
        let step_size = base_step_size * self.zoom_level;

        // üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        let pan_factor = self.pan_offset * 0.001; // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è

        for (i, candle) in visible_candles.iter().enumerate() {
            // üîç –ü–æ–∑–∏—Ü–∏—è X —Å —É—á–µ—Ç–æ–º –∑—É–º–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
            let base_x = -1.0 + (i as f64 + 0.5) * base_step_size;
            let x = (base_x + pan_factor).clamp(-1.0, 1.0);

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-0.5, 0.8] (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è volume bars)
            let normalize_price = |price: f64| -> f32 {
                let normalized = (price - min_price) / price_range;
                (-0.5 + normalized * 1.3) as f32
            };

            let open_y = normalize_price(candle.ohlcv.open.value());
            let high_y = normalize_price(candle.ohlcv.high.value());
            let low_y = normalize_price(candle.ohlcv.low.value());
            let close_y = normalize_price(candle.ohlcv.close.value());

            // üîç –®–∏—Ä–∏–Ω–∞ —Å–≤–µ—á–∏ —Å —É—á–µ—Ç–æ–º –∑—É–º–∞
            let candle_width = (step_size * 0.6) as f32;

            // –¶–≤–µ—Ç —Å–≤–µ—á–∏ (–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞, –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è)
            let _color = if candle.ohlcv.close.value() >= candle.ohlcv.open.value() {
                [0.0, 0.8, 0.0, 1.0]
            } else {
                [0.8, 0.0, 0.0, 1.0]
            };

            // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å–≤–µ—á–∏ (body + wicks)
            let x_f32 = x as f32;

            // High-Low wick (—Ç–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è)
            vertices.push(CandleVertex::wick_vertex(x_f32, high_y));
            vertices.push(CandleVertex::wick_vertex(x_f32, low_y));

            // Open-Close body (—Ç–æ–ª—Å—Ç—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
            let body_top = open_y.max(close_y);
            let body_bottom = open_y.min(close_y);
            let is_bullish = candle.ohlcv.close.value() >= candle.ohlcv.open.value();

            // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ body
            vertices.push(CandleVertex::body_vertex(
                x_f32 - candle_width / 2.0,
                body_top,
                is_bullish,
            ));
            vertices.push(CandleVertex::body_vertex(
                x_f32 - candle_width / 2.0,
                body_bottom,
                is_bullish,
            ));

            // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ body
            vertices.push(CandleVertex::body_vertex(
                x_f32 + candle_width / 2.0,
                body_top,
                is_bullish,
            ));
            vertices.push(CandleVertex::body_vertex(
                x_f32 + candle_width / 2.0,
                body_bottom,
                is_bullish,
            ));
        }

        vertices
    }
}
