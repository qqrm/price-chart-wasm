use bytemuck::{Pod, Zeroable};

/// –¢–∏–ø—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è GPU —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
#[derive(Debug, Clone, Copy)]
pub enum IndicatorType {
    SMA20,
    SMA50,
    SMA200,
    EMA12,
    EMA26,
}

/// GPU –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –≤–µ—Ä—à–∏–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
#[repr(C)]
#[derive(Copy, Clone, Debug, Pod, Zeroable)]
pub struct CandleVertex {
    /// –ü–æ–∑–∏—Ü–∏—è X (–≤—Ä–µ–º—è –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö)
    pub position_x: f32,
    /// –ü–æ–∑–∏—Ü–∏—è Y (—Ü–µ–Ω–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö)  
    pub position_y: f32,
    /// –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: 0 = —Ç–µ–ª–æ —Å–≤–µ—á–∏, 1 = —Ñ–∏—Ç–∏–ª—å, 2 = –ª–∏–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, 3 = —Å–µ—Ç–∫–∞, 4 = current price line
    pub element_type: f32,
    /// –¶–≤–µ—Ç/–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: –¥–ª—è —Å–≤–µ—á–µ–π 0/1, –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: 2=SMA20, 3=SMA50, 4=SMA200, 5=EMA12, 6=EMA26, 7 = current price
    pub color_type: f32,
}

impl CandleVertex {
    /// –°–æ–∑–¥–∞—Ç—å vertex –¥–ª—è —Ç–µ–ª–∞ —Å–≤–µ—á–∏
    pub fn body_vertex(x: f32, y: f32, is_bullish: bool) -> Self {
        Self {
            position_x: x,
            position_y: y,
            element_type: 0.0, // —Ç–µ–ª–æ
            color_type: if is_bullish { 1.0 } else { 0.0 },
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å vertex –¥–ª—è —Ñ–∏—Ç–∏–ª—è —Å–≤–µ—á–∏
    pub fn wick_vertex(x: f32, y: f32) -> Self {
        Self {
            position_x: x,
            position_y: y,
            element_type: 1.0, // —Ñ–∏—Ç–∏–ª—å
            color_type: 0.5,   // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ñ–∏—Ç–∏–ª—è
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å vertex –¥–ª—è –ª–∏–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    pub fn indicator_vertex(x: f32, y: f32, indicator_type: IndicatorType) -> Self {
        let color_type = match indicator_type {
            IndicatorType::SMA20 => 2.0,
            IndicatorType::SMA50 => 3.0,
            IndicatorType::SMA200 => 4.0,
            IndicatorType::EMA12 => 5.0,
            IndicatorType::EMA26 => 6.0,
        };

        Self {
            position_x: x,
            position_y: y,
            element_type: 2.0, // –ª–∏–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            color_type,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å vertex –¥–ª—è —Å–µ—Ç–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    pub fn grid_vertex(x: f32, y: f32) -> Self {
        Self {
            position_x: x,
            position_y: y,
            element_type: 3.0, // —Å–µ—Ç–∫–∞
            color_type: 0.2,   // –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
        }
    }

    /// üí∞ –°–æ–∑–¥–∞—Ç—å vertex –¥–ª—è –ª–∏–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    pub fn current_price_vertex(x: f32, y: f32) -> Self {
        Self {
            position_x: x,
            position_y: y,
            element_type: 4.0, // current price line
            color_type: 7.0,   // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è current price
        }
    }

    /// üìä –°–æ–∑–¥–∞—Ç—å vertex –¥–ª—è volume bars
    pub fn volume_vertex(x: f32, y: f32, is_bullish: bool) -> Self {
        Self {
            position_x: x,
            position_y: y,
            element_type: 5.0,                              // volume bar
            color_type: if is_bullish { 1.0 } else { 0.0 }, // —Ç–æ—Ç –∂–µ —Ü–≤–µ—Ç —á—Ç–æ –∏ —É —Å–≤–µ—á–µ–π
        }
    }

    /// –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –≤–µ—Ä—à–∏–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –¥–ª—è wgpu
    pub fn desc<'a>() -> wgpu::VertexBufferLayout<'a> {
        wgpu::VertexBufferLayout {
            array_stride: std::mem::size_of::<CandleVertex>() as wgpu::BufferAddress,
            step_mode: wgpu::VertexStepMode::Vertex,
            attributes: &[
                // position_x
                wgpu::VertexAttribute {
                    offset: 0,
                    shader_location: 0,
                    format: wgpu::VertexFormat::Float32,
                },
                // position_y
                wgpu::VertexAttribute {
                    offset: std::mem::size_of::<f32>() as wgpu::BufferAddress,
                    shader_location: 1,
                    format: wgpu::VertexFormat::Float32,
                },
                // element_type
                wgpu::VertexAttribute {
                    offset: (2 * std::mem::size_of::<f32>()) as wgpu::BufferAddress,
                    shader_location: 2,
                    format: wgpu::VertexFormat::Float32,
                },
                // color_type
                wgpu::VertexAttribute {
                    offset: (3 * std::mem::size_of::<f32>()) as wgpu::BufferAddress,
                    shader_location: 3,
                    format: wgpu::VertexFormat::Float32,
                },
            ],
        }
    }
}

/// Uniform –±—É—Ñ–µ—Ä –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
#[repr(C)]
#[derive(Copy, Clone, Debug, Pod, Zeroable)]
pub struct ChartUniforms {
    /// –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è viewport
    pub view_proj_matrix: [[f32; 4]; 4],
    /// –†–∞–∑–º–µ—Ä—ã viewport (width, height, min_price, max_price)
    pub viewport: [f32; 4],
    /// –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (start_time, end_time, time_range, _padding)
    pub time_range: [f32; 4],
    /// –¶–≤–µ—Ç–∞ (bullish_r, bullish_g, bullish_b, bullish_a)
    pub bullish_color: [f32; 4],
    /// –¶–≤–µ—Ç–∞ (bearish_r, bearish_g, bearish_b, bearish_a)
    pub bearish_color: [f32; 4],
    /// –¶–≤–µ—Ç —Ñ–∏—Ç–∏–ª—è (wick_r, wick_g, wick_b, wick_a)
    pub wick_color: [f32; 4],
    /// –¶–≤–µ—Ç SMA 20 (sma20_r, sma20_g, sma20_b, sma20_a)
    pub sma20_color: [f32; 4],
    /// –¶–≤–µ—Ç SMA 50 (sma50_r, sma50_g, sma50_b, sma50_a)
    pub sma50_color: [f32; 4],
    /// –¶–≤–µ—Ç SMA 200 (sma200_r, sma200_g, sma200_b, sma200_a)
    pub sma200_color: [f32; 4],
    /// –¶–≤–µ—Ç EMA 12 (ema12_r, ema12_g, ema12_b, ema12_a)
    pub ema12_color: [f32; 4],
    /// –¶–≤–µ—Ç EMA 26 (ema26_r, ema26_g, ema26_b, ema26_a)
    pub ema26_color: [f32; 4],
    /// üí∞ –¶–≤–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (current_price_r, current_price_g, current_price_b, current_price_a)
    pub current_price_color: [f32; 4],
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (candle_width, spacing, line_width, _padding)
    pub render_params: [f32; 4],
}

impl Default for ChartUniforms {
    fn default() -> Self {
        Self::new()
    }
}

impl ChartUniforms {
    pub fn new() -> Self {
        Self {
            view_proj_matrix: [
                [1.0, 0.0, 0.0, 0.0],
                [0.0, 1.0, 0.0, 0.0],
                [0.0, 0.0, 1.0, 0.0],
                [0.0, 0.0, 0.0, 1.0],
            ],
            viewport: [800.0, 600.0, 0.0, 100.0],
            time_range: [0.0, 0.0, 0.0, 0.0],
            bullish_color: [0.455, 0.780, 0.529, 1.0], // #74c787 - buy
            bearish_color: [0.882, 0.424, 0.282, 1.0], // #e16c48 - sell
            wick_color: [0.6, 0.6, 0.6, 1.0],          // –°–µ—Ä—ã–π
            sma20_color: [1.0, 0.0, 0.0, 1.0],         // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
            sma50_color: [1.0, 0.8, 0.0, 1.0],         // –ñ–µ–ª—Ç—ã–π
            sma200_color: [0.2, 0.4, 0.8, 1.0],        // –°–∏–Ω–∏–π
            ema12_color: [0.8, 0.2, 0.8, 1.0],         // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            ema26_color: [0.0, 0.8, 0.8, 1.0],         // –ì–æ–ª—É–±–æ–π
            current_price_color: [1.0, 1.0, 0.0, 0.8], // üí∞ –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            render_params: [8.0, 2.0, 1.0, 0.0],       // width, spacing, line_width, padding
        }
    }
}

/// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —Å–≤–µ—á–µ–π
pub struct CandleGeometry;

impl CandleGeometry {
    /// –°–æ–∑–¥–∞—Ç—å vertices –¥–ª—è –æ–¥–Ω–æ–π —Å–≤–µ—á–∏
    #[allow(clippy::too_many_arguments)]
    pub fn create_candle_vertices(
        _timestamp: f64,
        open: f32,
        _high: f32,
        _low: f32,
        close: f32,
        x_normalized: f32,
        open_y: f32,
        high_y: f32,
        low_y: f32,
        close_y: f32,
        width: f32,
    ) -> Vec<CandleVertex> {
        let mut vertices = Vec::new();
        let is_bullish = close > open;
        let half_width = width * 0.5;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–ª–∞ —Å–≤–µ—á–∏
        let body_top = if is_bullish { close_y } else { open_y };
        let body_bottom = if is_bullish { open_y } else { close_y };

        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ç–µ–ª–∞ —Å–≤–µ—á–∏ (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ = 6 –≤–µ—Ä—à–∏–Ω)
        let body_vertices = [
            // –ü–µ—Ä–≤—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            CandleVertex::body_vertex(x_normalized - half_width, body_bottom, is_bullish),
            CandleVertex::body_vertex(x_normalized + half_width, body_bottom, is_bullish),
            CandleVertex::body_vertex(x_normalized - half_width, body_top, is_bullish),
            // –í—Ç–æ—Ä–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
            CandleVertex::body_vertex(x_normalized + half_width, body_bottom, is_bullish),
            CandleVertex::body_vertex(x_normalized + half_width, body_top, is_bullish),
            CandleVertex::body_vertex(x_normalized - half_width, body_top, is_bullish),
        ];

        vertices.extend_from_slice(&body_vertices);

        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è —Ñ–∏—Ç–∏–ª–µ–π (–≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π)
        let wick_width = width * 0.1; // –§–∏—Ç–∏–ª—å —Ç–æ–Ω—å—à–µ —Ç–µ–ª–∞
        let wick_half = wick_width * 0.5;

        // –í–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if high_y > body_top {
            let upper_wick = [
                CandleVertex::wick_vertex(x_normalized - wick_half, body_top),
                CandleVertex::wick_vertex(x_normalized + wick_half, body_top),
                CandleVertex::wick_vertex(x_normalized - wick_half, high_y),
                CandleVertex::wick_vertex(x_normalized + wick_half, body_top),
                CandleVertex::wick_vertex(x_normalized + wick_half, high_y),
                CandleVertex::wick_vertex(x_normalized - wick_half, high_y),
            ];
            vertices.extend_from_slice(&upper_wick);
        }

        // –ù–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if low_y < body_bottom {
            let lower_wick = [
                CandleVertex::wick_vertex(x_normalized - wick_half, low_y),
                CandleVertex::wick_vertex(x_normalized + wick_half, low_y),
                CandleVertex::wick_vertex(x_normalized - wick_half, body_bottom),
                CandleVertex::wick_vertex(x_normalized + wick_half, low_y),
                CandleVertex::wick_vertex(x_normalized + wick_half, body_bottom),
                CandleVertex::wick_vertex(x_normalized - wick_half, body_bottom),
            ];
            vertices.extend_from_slice(&lower_wick);
        }

        vertices
    }

    /// üí∞ –°–æ–∑–¥–∞—Ç—å vertices –¥–ª—è –ª–∏–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    pub fn create_current_price_line(current_price_y: f32, line_width: f32) -> Vec<CandleVertex> {
        let half_width = line_width * 0.5;

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        vec![
            CandleVertex::current_price_vertex(-1.0, current_price_y - half_width),
            CandleVertex::current_price_vertex(1.0, current_price_y - half_width),
            CandleVertex::current_price_vertex(-1.0, current_price_y + half_width),
            CandleVertex::current_price_vertex(1.0, current_price_y - half_width),
            CandleVertex::current_price_vertex(1.0, current_price_y + half_width),
            CandleVertex::current_price_vertex(-1.0, current_price_y + half_width),
        ]
    }

    /// –°–æ–∑–¥–∞—Ç—å vertices –¥–ª—è –ª–∏–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Å–ø–ª–æ—à–Ω—ã—Ö –ª–∏–Ω–∏–π
    pub fn create_indicator_line_vertices(
        points: &[(f32, f32)], // (x_normalized, y_normalized) —Ç–æ—á–∫–∏
        indicator_type: IndicatorType,
        line_width: f32,
    ) -> Vec<CandleVertex> {
        if points.len() < 2 {
            return Vec::new();
        }

        let mut vertices = Vec::new();
        let half_width = (line_width * 0.3).max(0.001); // –¢–æ–Ω—å—à–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞

        // –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –ª–∏–Ω–∏—é –∫–∞–∫ triangle strip
        for i in 0..(points.len() - 1) {
            let (x1, y1) = points[i];
            let (x2, y2) = points[i + 1];

            // –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–∏
            let dx = x2 - x1;
            let dy = y2 - y1;
            let length = (dx * dx + dy * dy).sqrt();

            // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
            let (perp_x, perp_y) = if length > 0.0001 {
                (-dy / length * half_width, dx / length * half_width)
            } else {
                (0.0, half_width) // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            };

            // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–∫ –¥–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –±–µ–∑ –∑–∞–∑–æ—Ä–æ–≤
            let segment_vertices = [
                // –ü–µ—Ä–≤—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                CandleVertex::indicator_vertex(x1 - perp_x, y1 - perp_y, indicator_type),
                CandleVertex::indicator_vertex(x1 + perp_x, y1 + perp_y, indicator_type),
                CandleVertex::indicator_vertex(x2 - perp_x, y2 - perp_y, indicator_type),
                // –í—Ç–æ—Ä–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                CandleVertex::indicator_vertex(x1 + perp_x, y1 + perp_y, indicator_type),
                CandleVertex::indicator_vertex(x2 + perp_x, y2 + perp_y, indicator_type),
                CandleVertex::indicator_vertex(x2 - perp_x, y2 - perp_y, indicator_type),
            ];

            vertices.extend_from_slice(&segment_vertices);
        }

        vertices
    }

    /// –°–æ–∑–¥–∞—Ç—å vertices –¥–ª—è —Å–µ—Ç–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    pub fn create_grid_vertices(
        _viewport_width: f32,
        _viewport_height: f32,
        grid_lines_x: u32,
        grid_lines_y: u32,
    ) -> Vec<CandleVertex> {
        let mut vertices = Vec::new();
        let line_width = 0.002; // –¢–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in 0..=grid_lines_x {
            let x = i as f32 / grid_lines_x as f32 * 2.0 - 1.0; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ [-1, 1]
            let half_width = line_width * 0.5;

            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫–∞–∫ —Ç–æ–Ω–∫–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            vertices.extend_from_slice(&[
                CandleVertex::wick_vertex(x - half_width, -1.0),
                CandleVertex::wick_vertex(x + half_width, -1.0),
                CandleVertex::wick_vertex(x - half_width, 1.0),
                CandleVertex::wick_vertex(x + half_width, -1.0),
                CandleVertex::wick_vertex(x + half_width, 1.0),
                CandleVertex::wick_vertex(x - half_width, 1.0),
            ]);
        }

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in 0..=grid_lines_y {
            let y = i as f32 / grid_lines_y as f32 * 2.0 - 1.0; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ [-1, 1]
            let half_width = line_width * 0.5;

            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∫–∞–∫ —Ç–æ–Ω–∫–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            vertices.extend_from_slice(&[
                CandleVertex::wick_vertex(-1.0, y - half_width),
                CandleVertex::wick_vertex(1.0, y - half_width),
                CandleVertex::wick_vertex(-1.0, y + half_width),
                CandleVertex::wick_vertex(1.0, y - half_width),
                CandleVertex::wick_vertex(1.0, y + half_width),
                CandleVertex::wick_vertex(-1.0, y + half_width),
            ]);
        }

        vertices
    }

    /// –°–æ–∑–¥–∞—Ç—å —É–º–Ω—É—é —Ü–µ–Ω–æ–≤—É—é —Å–µ—Ç–∫—É —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
    pub fn create_price_grid(
        min_price: f32,
        max_price: f32,
        chart_width: f32,
        chart_height: f32,
        time_lines: u32,
        price_lines: u32,
    ) -> Vec<CandleVertex> {
        let mut vertices = Vec::new();
        let grid_line_width = 0.001; // –û—á–µ–Ω—å —Ç–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
        let half_width = grid_line_width * 0.5;

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞)
        for i in 1..time_lines {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ –ª–∏–Ω–∏–∏
            let x = (i as f32 / time_lines as f32) * chart_width - 1.0;

            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            vertices.extend_from_slice(&[
                CandleVertex::grid_vertex(x - half_width, -1.0),
                CandleVertex::grid_vertex(x + half_width, -1.0),
                CandleVertex::grid_vertex(x - half_width, 1.0),
                CandleVertex::grid_vertex(x + half_width, -1.0),
                CandleVertex::grid_vertex(x + half_width, 1.0),
                CandleVertex::grid_vertex(x - half_width, 1.0),
            ]);
        }

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (—Ü–µ–Ω–æ–≤–∞—è —Å–µ—Ç–∫–∞)
        let price_range = max_price - min_price;
        let nice_step = Self::calculate_nice_price_step(price_range, price_lines);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã
        let first_price = ((min_price / nice_step).ceil() * nice_step).max(min_price);

        let mut current_price = first_price;
        while current_price <= max_price {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y
            let y = -1.0 + ((current_price - min_price) / price_range) * chart_height;

            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            vertices.extend_from_slice(&[
                CandleVertex::grid_vertex(-1.0, y - half_width),
                CandleVertex::grid_vertex(1.0, y - half_width),
                CandleVertex::grid_vertex(-1.0, y + half_width),
                CandleVertex::grid_vertex(1.0, y - half_width),
                CandleVertex::grid_vertex(1.0, y + half_width),
                CandleVertex::grid_vertex(-1.0, y + half_width),
            ]);

            current_price += nice_step;
        }

        vertices
    }

    /// –í—ã—á–∏—Å–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —à–∞–≥ –¥–ª—è —Ü–µ–Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏
    fn calculate_nice_price_step(price_range: f32, target_lines: u32) -> f32 {
        let raw_step = price_range / target_lines as f32;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ä—è–¥–æ–∫ –≤–µ–ª–∏—á–∏–Ω—ã
        let magnitude = 10.0_f32.powf(raw_step.log10().floor());

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [1, 10)
        let normalized = raw_step / magnitude;

        // –í—ã–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        let nice_normalized = if normalized <= 1.0 {
            1.0
        } else if normalized <= 2.0 {
            2.0
        } else if normalized <= 5.0 {
            5.0
        } else {
            10.0
        };

        nice_normalized * magnitude
    }
}
