// Uniform –±—É—Ñ–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞
struct ChartUniforms {
    view_proj_matrix: mat4x4<f32>,
    viewport: vec4<f32>,          // width, height, min_price, max_price
    time_range: vec4<f32>,        // start_time, end_time, time_range, _padding
    bullish_color: vec4<f32>,     // –¶–≤–µ—Ç –±—ã—á—å–∏—Ö —Å–≤–µ—á–µ–π (–∑–µ–ª–µ–Ω—ã–π)
    bearish_color: vec4<f32>,     // –¶–≤–µ—Ç –º–µ–¥–≤–µ–∂—å–∏—Ö —Å–≤–µ—á–µ–π (–∫—Ä–∞—Å–Ω—ã–π)
    wick_color: vec4<f32>,        // –¶–≤–µ—Ç —Ñ–∏—Ç–∏–ª–µ–π (—Å–µ—Ä—ã–π)
    sma20_color: vec4<f32>,       // –¶–≤–µ—Ç SMA 20 (–∫—Ä–∞—Å–Ω—ã–π)
    sma50_color: vec4<f32>,       // –¶–≤–µ—Ç SMA 50 (–∂–µ–ª—Ç—ã–π)
    sma200_color: vec4<f32>,      // –¶–≤–µ—Ç SMA 200 (—Å–∏–Ω–∏–π)
    ema12_color: vec4<f32>,       // –¶–≤–µ—Ç EMA 12 (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
    ema26_color: vec4<f32>,       // –¶–≤–µ—Ç EMA 26 (–≥–æ–ª—É–±–æ–π)
    current_price_color: vec4<f32>, // üí∞ –¶–≤–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (—è—Ä–∫–æ-–∂–µ–ª—Ç—ã–π)
    render_params: vec4<f32>,     // candle_width, spacing, line_width, _padding
}

@group(0) @binding(0)
var<uniform> uniforms: ChartUniforms;

// –í–µ—Ä—à–∏–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
struct VertexInput {
    @location(0) position_x: f32,    // X –ø–æ–∑–∏—Ü–∏—è –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    @location(1) position_y: f32,    // Y –ø–æ–∑–∏—Ü–∏—è –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    @location(2) element_type: f32,  // 0.0 = —Ç–µ–ª–æ —Å–≤–µ—á–∏, 1.0 = —Ñ–∏—Ç–∏–ª—å, 2.0 = –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, 3.0 = —Å–µ—Ç–∫–∞, 4.0 = current price
    @location(3) color_type: f32,    // 0.0 = –º–µ–¥–≤–µ–∂—å—è, 1.0 = –±—ã—á—å—è, 0.5 = —Ñ–∏—Ç–∏–ª—å, 2-6 = –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, 7.0 = current price
}

// –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞
struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) color: vec4<f32>,
    @location(1) element_type: f32,
}

@vertex
fn vs_main(vertex: VertexInput) -> VertexOutput {
    var out: VertexOutput;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∑–∏—Ü–∏–∏
    let position = vec4<f32>(vertex.position_x, vertex.position_y, 0.0, 1.0);
    out.clip_position = uniforms.view_proj_matrix * position;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Ü–≤–µ—Ç–∞
    if (vertex.element_type < 0.5) {
        // –¢–µ–ª–æ —Å–≤–µ—á–∏
        if (vertex.color_type > 0.5) {
            out.color = uniforms.bullish_color; // –ë—ã—á—å—è —Å–≤–µ—á–∞ - –∑–µ–ª–µ–Ω–∞—è
        } else {
            out.color = uniforms.bearish_color; // –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ - –∫—Ä–∞—Å–Ω–∞—è
        }
    } else if (vertex.element_type < 1.5) {
        // –§–∏—Ç–∏–ª—å
        out.color = uniforms.wick_color; // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ñ–∏—Ç–∏–ª–µ–π
    } else if (vertex.element_type < 2.5) {
        // –õ–∏–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        if (vertex.color_type < 2.5) {
            out.color = uniforms.sma20_color; // SMA 20 - –∫—Ä–∞—Å–Ω—ã–π
        } else if (vertex.color_type < 3.5) {
            out.color = uniforms.sma50_color; // SMA 50 - –∂–µ–ª—Ç—ã–π
        } else if (vertex.color_type < 4.5) {
            out.color = uniforms.sma200_color; // SMA 200 - —Å–∏–Ω–∏–π
        } else if (vertex.color_type < 5.5) {
            out.color = uniforms.ema12_color; // EMA 12 - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        } else {
            out.color = uniforms.ema26_color; // EMA 26 - –≥–æ–ª—É–±–æ–π
        }
    } else if (vertex.element_type < 3.5) {
        // –°–µ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        out.color = vec4<f32>(0.3, 0.3, 0.3, 0.3); // –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π, –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    } else if (vertex.element_type < 4.5) {
        // üí∞ –õ–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        out.color = uniforms.current_price_color; // –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π
    } else if (vertex.element_type < 5.5) {
        // üìä Volume bars
        if (vertex.color_type > 0.5) {
            // –ë—ã—á–∏–π volume - –∑–µ–ª–µ–Ω—ã–π —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —è—Ä–∫–æ—Å—Ç—å—é
            out.color = vec4<f32>(uniforms.bullish_color.rgb * 0.6, 0.8);
        } else {
            // –ú–µ–¥–≤–µ–∂–∏–π volume - –∫—Ä–∞—Å–Ω—ã–π —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —è—Ä–∫–æ—Å—Ç—å—é
            out.color = vec4<f32>(uniforms.bearish_color.rgb * 0.6, 0.8);
        }
    } else if (vertex.element_type > 98.0) {
        // –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô –¢–ï–°–¢ - —è—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        out.color = vec4<f32>(1.0, 0.0, 0.0, 1.0); // –ö—Ä–∞—Å–Ω—ã–π
    } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –±–µ–ª—ã–π
        out.color = vec4<f32>(1.0, 1.0, 1.0, 1.0);
    }
    
    out.element_type = vertex.element_type;
    
    return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π fragment shader - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç –æ—Ç vertex shader
    return vec4<f32>(in.color.rgb, 1.0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –æ—Ç vertex shader, –Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–ª—å—Ñ–∞ = 1.0
} 